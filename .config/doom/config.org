#+title: Doom Emacs Configuration
#+author: Kelvin Porter with some snippets from Shaun Singh, Tecosaur, and Henrik Lissner
#+date: @@html:<!--@@{{{git-rev}}}@@html:-->@@@@latex:\\\Large\bfseries@@ {{{modification-time(%Y-%m-%d, t)}}} @@latex:\\\normalsize\mdseries@@{{{modification-time(%H:%M, t)}}} @@latex:\acr{\lowercase{@@{{{timezone}}}@@latex:}}\iffalse@@, {{{git-rev}}}@@latex:\fi@@
#+macro: timezone (eval (substring (shell-command-to-string "date +%Z") 0 -1))
#+macro: git-rev (eval (format "@@html:<a href=\"https://github.com/pnivlek/dots/commit/%1$s\" style=\"text-decoration: none\"><code style=\"padding: 0; color: var(--text-light); font-size: inherit; opacity: 0.7\">%1$s</code></a>@@@@latex:\\href{https://github.com/pnivlek/dots/commit/%1$s}{\\normalsize\\texttt{%1$s}}@@" (substring (shell-command-to-string "git rev-parse --short HEAD") 0 -1)))
#+property: header-args:emacs-lisp :tangle yes :comments link
#+startup: fold

* Basic Configuration
Lexical binding makes it a bit faster.
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src

Don't compile org config every time.
#+begin_src emacs-lisp
(remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src

** Init.el
This tangles into init.el. Pretty straightforward, defines doom's features.
#+begin_src emacs-lisp :tangle "init.el"
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation, and 'gd' to browse its directory.

(doom! :completion
       (company                     ; the ultimate code completion backend
        +childframe)                ; ... when your children are better than you
       ;;helm                       ; the *other* search engine for love and life
       ;;ido                        ; the other *other* search engine...
       ;;(ivy                         ; a search engine for love and life
       ;; +icons                      ; ... icons are nice
       ;; +prescient)                 ; ... I know what I want(ed)
       vertico			     ; the search engine of the future

       :ui
       ;;deft                       ; notational velocity for Emacs
       doom                         ; what makes DOOM look the way it does
       doom-dashboard               ; a nifty splash screen for Emacs
       doom-quit                    ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)             ; 🙂
       ;;fill-column                ; a `fill-column' indicator
       hl-todo                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra                      ; quick documentation for related commands
       ;;indent-guides              ; highlighted indent columns, notoriously slow
       ;;(ligatures +extra)           ; ligatures and symbols to make your code pretty again
       ;;minimap                    ; show a map of the code on the side
       modeline                     ; snazzy, Atom-inspired modeline, plus API
       nav-flash                    ; blink the current line after jumping
       neotree                      ; a project drawer, like NERDTree for vim
       ophints                      ; highlight the region an operation acts on
       (popup                       ; tame sudden yet inevitable temporary windows
        +all                        ; catch all popups that start with an asterix
        +defaults)                  ; default popup rules
       ;;(tabs                      ; an tab bar for Emacs
       ;;  +centaur-tabs)           ; ... with prettier tabs
       ;;treemacs                     ; a project drawer, like neotree but cooler
       ;;unicode                    ; extended unicode support for various languages
       vc-gutter                    ; vcs diff in the fringe
       vi-tilde-fringe              ; fringe tildes to mark beyond EOB
       (window-select +numbers)     ; visually switch windows
       workspaces                   ; tab emulation, persistence & separate workspaces
       zen                          ; distraction-free coding or writing

       :editor
       (evil +everywhere)           ; come to the dark side, we have cookies
       file-templates               ; auto-snippets for empty files
       fold                         ; (nigh) universal code folding
       (format)                     ; automated prettiness
       ;;god                        ; run Emacs commands without modifier keys
       ;;lispy                      ; vim for lisp, for people who don't like vim
       multiple-cursors             ; editing in many places at once
       ;;objed                      ; text object editing for the innocent
       ;;parinfer                   ; turn lisp into python, sort of
       rotate-text                  ; cycle region at point between text candidates
       snippets                     ; my elves. They type so I don't have to
       ;;word-wrap                  ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)               ; making dired pretty [functional]
       electric                     ; smarter, keyword-based electric-indent
       ;;(ibuffer icons)             ; interactive buffer management
       (undo +tree)                 ; persistent, smarter undo for your inevitable mistakes
       vc                           ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell                     ; the elisp shell that works everywhere
       ;;shell                      ; simple shell REPL for Emacs
       ;;term                       ; basic terminal emulator for Emacs
       vterm                        ; the best terminal emulation in Emacs

       :checkers
       syntax                       ; tasing you for every semicolon you forget
       (:if (executable-find "aspell") spell) ; tasing you for misspelling mispelling
       grammar                      ; tasing grammar mistake every you make

       :tools
       ;;ansible                      ; a crucible for infrastructure as code
       ;;debugger                   ; FIXME stepping through code, to help you add bugs
       ;;direnv                     ; be direct about your environment
       ;;docker                       ; port everything to containers
       ;;editorconfig               ; let someone else argue about tabs vs spaces
       ;;ein                        ; tame Jupyter notebooks with emacs
       (eval +overlay)              ; run code, run (also, repls)
       ;;gist                       ; interacting with github gists
       (lookup                      ; helps you navigate your code and documentation
        +dictionary                 ; dictionary/thesaurus is nice
        +docsets)                   ; ...or in Dash docsets locally
       lsp                          ; Language Server Protocol
       (magit                       ; a git porcelain for Emacs
        +forge)                     ; interface with git forges
       make                         ; run make tasks from Emacs
       ;;pass                       ; password manager for nerds
       pdf                          ; pdf enhancements
       ;;prodigy                    ; FIXME managing external services & code builders
       rgb                          ; creating color strings
       ;;taskrunner                 ; taskrunner for all your projects
       ;;terraform                  ; infrastructure as code
       ;;tmux                       ; an API for interacting with tmux
       ;;upload                       ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)	     ; improve compatibility with macOS
       tty                          ; improve the terminal Emacs experience

       :lang
       ;;agda                       ; types of types of types of types...
       ;;beancount                  ; mind the GAAP
       (cc +lsp)                         ; C/C++/Obj-C madness
       ;;clojure                    ; java with a lisp
       ;;common-lisp                ; if you've seen one lisp, you've seen them all
       ;;coq                        ; proofs-as-programs
       ;;crystal                    ; ruby at the speed of c
       (csharp +lsp +dotnet)        ; unity, .NET, and mono shenanigans
       data                         ; config/data formats
       ;;(dart +flutter)            ; paint ui and not much else
       ;;elixir                     ; erlang done right
       ;;elm                        ; care for a cup of TEA?
       emacs-lisp                   ; drown in parentheses
       ;;erlang                     ; an elegant language for a more civilized age
       ;;ess                          ; emacs speaks statistics
       ;;factor                     ; for when scripts are stacked against you
       ;;faust                      ; dsp, but you get to keep your soul
       ;;fsharp                     ; ML stands for Microsoft's Language
       ;;fstar                      ; (dependent) types and (monadic) effects and Z3
       ;;gdscript                   ; the language you've waited for
       (go +lsp)                  ; the hipster dialect
       (haskell +lsp)            ; a language that's lazier than I am
       ;;hy                         ; readability of scheme w/ speed of python
       ;;idris                      ; a language you can depend on
       json                         ; At least it ain't XML
       (java +lsp)          ; the poster child for carpal tunnel syndrome
       (javascript +lsp)            ; all(hope(abandon(ye(who(enter(here))))))
       ;;(julia +lsp)                 ; a better, faster MATLAB
       ;;kotlin                     ; a better, slicker Java(Script)
       (latex                       ; writing papers in Emacs has never been so fun
        +latexmk                    ; what else would you use?
        +cdlatex                    ; quick maths symbols
        +fold)                      ; fold the clutter away nicities
       ;;lean                       ; proof that mathematicians need help
       ;;ledger                     ; be audit you can be
       ;;lua                        ; one-based indices? one-based indices
       markdown                       ; writing docs for people to ignore
       ;;nim                        ; python + lisp at the speed of c
       ;;nix                        ; I hereby declare "nix geht mehr!"
       ocaml                      ; an objective camel
       (org                         ; organize your plain life in plain text
        ;;+pretty                     ; yessss my pretties! (nice unicode symbols)
        +dragndrop                  ; drag & drop files/images into org buffers
        ;;+hugo                     ; use Emacs for hugo blogging
        ;;+noter                      ; enhanced PDF notetaking
        +jupyter                    ; ipython/jupyter support for babel
        +pandoc                     ; export-with-pandoc support
        ;;+gnuplot                    ; who doesn't like pretty pictures
        ;;+pomodoro                 ; be fruitful with the tomato technique
        ;;+present                    ; using org-mode for presentations
        +roam2)                      ; wander around notes
       ;;php                        ; perl's insecure younger brother
       ;;plantuml                   ; diagrams for confusing people more
       ;;purescript                 ; javascript, but functional
       (python +lsp +pyright +conda)       ; beautiful is better than ugly
       ;;qt                         ; the 'cutest' gui framework ever
       ;;racket                     ; a DSL for DSLs
       ;;raku                       ; the artist formerly known as perl6
       ;;rest                       ; Emacs as a REST client
       ;;rst                        ; ReST in peace
       ;;(ruby +rails)              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)                  ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala                      ; java, but good
       ;;scheme                       ; a fully conniving family of lisps
       sh                           ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml                        ; no, the /other/ ML
       ;;solidity                   ; do you need a blockchain? No.
       ;;swift                      ; who asked for emoji variables?
       ;;terra                      ; Earth and Moon in alignment for performance.
       web                          ; the tubes
       yaml                         ; JSON, but readable
       ;;zig                        ; C, but simpler

       :email
       ;;(:if (executable-find "mu") (mu4e +org +gmail))
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar                   ; A dated approach to timetabling
       ;;emms                       ; Multimedia in Emacs is music to my ears
       ;;everywhere                   ; *leave* Emacs!? You must be joking.
       ;;irc                          ; how neckbeards socialize
       (rss +org)                   ; emacs as an RSS reader
       ;;twitter                    ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens)
       )
#+end_src
** Packages.el
Install some of the packages to loaded later.
#+begin_src emacs-lisp :tangle "packages.el"
;; -*- no-byte-compile: t; -*-

(package! aas :recipe (:host github :repo "ymarco/auto-activating-snippets")
  :pin "e2b3edafd7aafa8c47833a70984d7404c607626c")
(package! laas :recipe (:host github :repo "tecosaur/LaTeX-auto-activating-snippets"))

(package! org-ql)

(package! doct
  :recipe (:host github :repo "progfolio/doct"))

(package! exec-path-from-shell)

(package! dendroam
  :recipe (:host github :repo "vicrdguez/dendroam" :branch "main"))

(package! org-fragtog)
#+end_src
** Personal Information
Name and such.
#+begin_src emacs-lisp
(setq user-full-name "Kelvin Porter"
      user-mail-address "kporter@protonmail.com")
#+end_src

Load private file with api keys for Todoist and stuff.
#+begin_src emacs-lisp :tangle no
(load (concat doom-private-dir "yack-private.el"))
#+end_src
** Shell
More than sh.
#+begin_src emacs-lisp
(setq explicit-shell-file-name (executable-find "zsh"))
#+end_src
Expose ssh agent variables to magit.
#+begin_src emacs-lisp
(require 'exec-path-from-shell)
(exec-path-from-shell-copy-env "SSH_AGENT_PID")
(exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
#+end_src
** Fonts
#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "M PLUS Code Latin 50" :style "Medium" :size 13)
(setq doom-font (font-spec :family "PragmataPro for Powerline" :style "Regular" :size 13)
      doom-big-font (font-spec :family "Overpass" :style "Regular" :size 24)
      doom-variable-pitch-font (font-spec :family "Overpass" :style "Regular" :size 14)
      doom-unicode-font (font-spec :family "JuliaMono" :style "Regular")
      ;; doom-serif-font (font-spec :family "M PLUS Code Latin 50" :weight 'light))
      doom-serif-font (font-spec :family "PragmataPro for Powerline" :style "Regular" :size 13))
#+end_src

A nicer font like Et Bembo for mixed pitch.
#+begin_src emacs-lisp
;;mixed pitch modes
(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode)
  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
(defun init-mixed-pitch-h ()
  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
  (when (memq major-mode mixed-pitch-modes)
    (mixed-pitch-mode 1))
  (dolist (hook mixed-pitch-modes)
    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h)
;;set mixed pitch font
(autoload #'mixed-pitch-serif-mode "mixed-pitch"
  "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch." t)

(after! mixed-pitch
  (defface variable-pitch-serif
    '((t (:family "serif")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)
  (setq mixed-pitch-set-height t)
  (setq variable-pitch-serif-font (font-spec :family "Et Bembo" :style "Roman LF" :size 24))
  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)
  (defun mixed-pitch-serif-mode (&optional arg)
    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch-serif))
      (mixed-pitch-mode (or arg 'toggle)))))
#+end_src

#+RESULTS:

** Theme
I use monokai spectrum colors for my rice, and this is no exception. We steal
tecosaur's change for orange modeline buffer on modification, swapping from red.
#+begin_src emacs-lisp
(setq doom-theme 'doom-tomorrow-night)
(delq! t custom-theme-load-path)
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src
** Better defaults
#+begin_src emacs-lisp
(setq undo-limit 80000000
      evil-want-fine-undo t
      scroll-margin 2
      auto-save-default t)
(fringe-mode 0)
(global-subword-mode 1)
#+end_src

#+begin_src emacs-lisp
(custom-set-faces!
  `(vertical-border :background ,(doom-color 'bg) :foreground ,(doom-color 'bg)))

(when (boundp 'window-divider-mode)
  (setq window-divider-default-places nil
        window-divider-default-bottom-width 0
        window-divider-default-right-width 0)
  (window-divider-mode -1))
#+end_src
Remove cursorline.
#+begin_src emacs-lisp
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)
#+end_src
* Visual Configuration
** Org mode appearance
#+begin_src emacs-lisp
(defun pnivlek/org-mode-appearance ()
  (setq header-line-format " "
        org-pretty-entities t
        org-hide-emphasis-markers t
        ;; show actually italicized text instead of /italicized text/
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t)
  (lambda () (progn
               (setq left-margin-width 2)
               (setq right-margin-width 2)
               (set-window-buffer nil (current-buffer))))
  )
(add-hook 'org-mode-hook #'pnivlek/org-mode-appearance)
#+end_src
** Modeline
Stealing Tecosaur's PDF improvements as well.
#+begin_src emacs-lisp
(after! doom-modeline
  (doom-modeline-def-segment buffer-name
    "Display the current buffer's name, without any other information."
    (concat
     (doom-modeline-spc)
     (doom-modeline--buffer-name)))

  (doom-modeline-def-segment pdf-icon
    "PDF icon from all-the-icons."
    (concat
     (doom-modeline-spc)
     (doom-modeline-icon 'octicon "file-pdf" nil nil
                         :face (if (doom-modeline--active)
                                   'all-the-icons-red
                                 'mode-line-inactive)
                         :v-adjust 0.02)))

  (defun doom-modeline-update-pdf-pages ()
    "Update PDF pages."
    (setq doom-modeline--pdf-pages
          (let ((current-page-str (number-to-string (eval `(pdf-view-current-page))))
                (total-page-str (number-to-string (pdf-cache-number-of-pages))))
            (concat
             (propertize
              (concat (make-string (- (length total-page-str) (length current-page-str)) ? )
                      " P" current-page-str)
              'face 'mode-line)
             (propertize (concat "/" total-page-str) 'face 'doom-modeline-buffer-minor-mode)))))

  (doom-modeline-def-segment pdf-pages
    "Display PDF pages."
    (if (doom-modeline--active) doom-modeline--pdf-pages
      (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))

  (doom-modeline-def-modeline 'pdf
    '(bar window-number pdf-pages pdf-icon buffer-name)
    '(misc-info matches major-mode process vcs)))
#+end_src
Remove encoding from modeline if its just UTF-8.
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))
(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding) ;;remove encoding
#+end_src
* Applications
** Newsfeed
RSS feeds are still a thing. Why not make use of them with =elfeed=.
I really like what [[https://github.com/fuxialexander/doom-emacs-private-xfu/tree/master/modules/app/rss][fuxialexander]] has going on, but I don't think I need a custom
module. Let's just try to patch on the main things I like the look of.

#+attr_html: :class invertible :alt Example elfeed entry
[[https://tecosaur.com/lfs/emacs-config/screenshots/elfeed.png]]

*** Keybindings
#+begin_src emacs-lisp
(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "q" #'+rss/quit
      :n "e" #'elfeed-update
      :n "r" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "RET" #'elfeed-search-show-entry
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :n "b" #'elfeed-search-browse-url
      :n "y" #'elfeed-search-yank)
(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "q" #'+rss/delete-pane
      :nm "o" #'ace-link-elfeed
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank)
#+end_src
*** Usability enhancements
#+begin_src emacs-lisp
(after! elfeed-search
  (set-evil-initial-state! 'elfeed-search-mode 'normal))
(after! elfeed-show-mode
  (set-evil-initial-state! 'elfeed-show-mode   'normal))

(after! evil-snipe
  (push 'elfeed-show-mode   evil-snipe-disabled-modes)
  (push 'elfeed-search-mode evil-snipe-disabled-modes))
#+end_src
*** Visual enhancements
#+begin_src emacs-lisp
(after! elfeed

  (elfeed-org)
  (use-package! elfeed-link)

  (setq elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function '+rss/elfeed-search-print-entry
        elfeed-search-title-min-width 80
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
        shr-max-image-proportion 0.6)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.5)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (defface elfeed-show-author-face `((t (:weight light)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (set-face-attribute 'elfeed-search-title-face nil
                      :foreground 'nil
                      :weight 'light)

  (defadvice! +rss-elfeed-wrap-h-nicer ()
    "Enhances an elfeed entry's readability by wrapping it to a width of
`fill-column' and centering it with `visual-fill-column-mode'."
    :override #'+rss-elfeed-wrap-h
    (setq-local truncate-lines nil
                shr-width 120
                visual-fill-column-center-text t
                default-text-properties '(line-height 1.1))
    (let ((inhibit-read-only t)
          (inhibit-modification-hooks t))
      (visual-fill-column-mode)
      ;; (setq-local shr-current-font '(:family "Merriweather" :height 1.2))
      (set-buffer-modified-p nil)))

  (defun +rss/elfeed-search-print-entry (entry)
    "Print ENTRY to the buffer."
    (let* ((elfeed-goodies/tag-column-width 40)
           (elfeed-goodies/feed-source-column-width 30)
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat (mapconcat 'identity tags ",")))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                           elfeed-goodies/tag-column-width 4))

           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp (length tags-str)
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :left))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left)))

      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
      (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
      (insert (propertize title 'face title-faces 'kbd-help title))
      (setq-local line-spacing 0.2)))

  (defun +rss/elfeed-show-refresh--better-style ()
    "Update the buffer to match the selected entry, using a mail-style."
    (interactive)
    (let* ((inhibit-read-only t)
           (title (elfeed-entry-title elfeed-show-entry))
           (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
           (author (elfeed-meta elfeed-show-entry :author))
           (link (elfeed-entry-link elfeed-show-entry))
           (tags (elfeed-entry-tags elfeed-show-entry))
           (tagsstr (mapconcat #'symbol-name tags ", "))
           (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
           (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
           (type (elfeed-entry-content-type elfeed-show-entry))
           (feed (elfeed-entry-feed elfeed-show-entry))
           (feed-title (elfeed-feed-title feed))
           (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
      (erase-buffer)
      (insert "\n")
      (insert (format "%s\n\n" (propertize title 'face 'elfeed-show-title-face)))
      (insert (format "%s\t" (propertize feed-title 'face 'elfeed-search-feed-face)))
      (when (and author elfeed-show-entry-author)
        (insert (format "%s\n" (propertize author 'face 'elfeed-show-author-face))))
      (insert (format "%s\n\n" (propertize nicedate 'face 'elfeed-log-date-face)))
      (when tags
        (insert (format "%s\n"
                        (propertize tagsstr 'face 'elfeed-search-tag-face))))
      ;; (insert (propertize "Link: " 'face 'message-header-name))
      ;; (elfeed-insert-link link link)
      ;; (insert "\n")
      (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
               do (insert (propertize "Enclosure: " 'face 'message-header-name))
               do (elfeed-insert-link (car enclosure))
               do (insert "\n"))
      (insert "\n")
      (if content
          (if (eq type 'html)
              (elfeed-insert-html content base)
            (insert content))
        (insert (propertize "(empty)\n" 'face 'italic)))
      (goto-char (point-min))))

  )
#+end_src
*** Functionality enhancements
#+begin_src emacs-lisp
(after! elfeed-show
  (require 'url)

  (defvar elfeed-pdf-dir
    (expand-file-name "pdfs/"
                      (file-name-directory (directory-file-name elfeed-enclosure-default-dir))))

  (defvar elfeed-link-pdfs
    '(("https://www.jstatsoft.org/index.php/jss/article/view/v0\\([^/]+\\)" . "https://www.jstatsoft.org/index.php/jss/article/view/v0\\1/v\\1.pdf")
      ("http://arxiv.org/abs/\\([^/]+\\)" . "https://arxiv.org/pdf/\\1.pdf"))
    "List of alists of the form (REGEX-FOR-LINK . FORM-FOR-PDF)")

  (defun elfeed-show-pdf (entry)
    (interactive
     (list (or elfeed-show-entry (elfeed-search-selected :ignore-region))))
    (let ((link (elfeed-entry-link entry))
          (feed-name (plist-get (elfeed-feed-meta (elfeed-entry-feed entry)) :title))
          (title (elfeed-entry-title entry))
          (file-view-function
           (lambda (f)
             (when elfeed-show-entry
               (elfeed-kill-buffer))
             (pop-to-buffer (find-file-noselect f))))
          pdf)

      (let ((file (expand-file-name
                   (concat (subst-char-in-string ?/ ?, title) ".pdf")
                   (expand-file-name (subst-char-in-string ?/ ?, feed-name)
                                     elfeed-pdf-dir))))
        (if (file-exists-p file)
            (funcall file-view-function file)
          (dolist (link-pdf elfeed-link-pdfs)
            (when (and (string-match-p (car link-pdf) link)
                       (not pdf))
              (setq pdf (replace-regexp-in-string (car link-pdf) (cdr link-pdf) link))))
          (if (not pdf)
              (message "No associated PDF for entry")
            (message "Fetching %s" pdf)
            (unless (file-exists-p (file-name-directory file))
              (make-directory (file-name-directory file) t))
            (url-copy-file pdf file)
            (funcall file-view-function file))))))

  )
#+end_src

* Language Configuration
** Org Mode
:PROPERTIES:
:CUSTOM_ID: org
:header-args:emacs-lisp: :tangle no :noweb-ref org-conf
:END:
Initialize all of this in an after! block
#+begin_src emacs-lisp :noweb no-export :tangle yes :noweb-ref nil
(after! org
  <<org-conf>>
  )
#+end_src
*** Basics
#+begin_src emacs-lisp
(setq org-directory "~/doc/org/"
      org-archive-location (concat org-directory ".archive/%s::")
      org-id-method 'ts
      org-journal-encrypt-journal t
      org-journal-file-format "%Y%m%d.org"
      org-ellipsis " [...]  "
      ;; Use g{h,j,k} to traverse headings and TAB to toggle their visibility,
      ;; and leave C-left/C-right to .  I'll do a lot of movement because my
      ;; presentations tend not to be very linear.
      org-tree-slide-skip-outline-level 2
      org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E
      org-priority-faces
      '((?A . 'all-the-icons-red)
        (?B . 'all-the-icons-orange)
        (?C . 'all-the-icons-yellow)
        (?D . 'all-the-icons-green)
        (?E . 'all-the-icons-blue)))


(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))
#+end_src

Display latex inline with fragtog
#+begin_src emacs-lisp
(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src
Latex auto activating snippets
#+begin_src emacs-lisp
(use-package! laas
  :hook (LaTeX-mode . laas-mode)
  :config
  (defun laas-tex-fold-maybe ()
    (unless (equal "/" aas-transient-snippet-key)
      (+latex-fold-last-macro-a)))
  (add-hook 'aas-post-snippet-expand-hook #'laas-tex-fold-maybe))
#+end_src
*** Capture
#+begin_src emacs-lisp
(use-package! doct
  :commands doct)
#+end_src

#+begin_src emacs-lisp :noweb no-export
(after! org-capture
  <<prettify-capture>>

  (defun +doct-icon-declaration-to-icon (declaration)
    "Convert :icon declaration to icon"
    (let ((name (pop declaration))
          (set  (intern (concat "all-the-icons-" (plist-get declaration :set))))
          (face (intern (concat "all-the-icons-" (plist-get declaration :color))))
          (v-adjust (or (plist-get declaration :v-adjust) 0.01)))
      (apply set `(,name :face ,face :v-adjust ,v-adjust))))

  (defun +doct-iconify-capture-templates (groups)
    "Add declaration's :icon to each template group in GROUPS."
    (let ((templates (doct-flatten-lists-in groups)))
      (setq doct-templates (mapcar (lambda (template)
                                     (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
                                                 (spec (plist-get (plist-get props :doct) :icon)))
                                       (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)
                                                                      "\t"
                                                                      (nth 1 template))))
                                     template)
                                   templates))))

  (setq doct-after-conversion-functions '(+doct-iconify-capture-templates))

  (setq +org-capture-todo-file "todo/todo.org")
  (defun set-org-capture-templates ()
    (setq org-capture-templates
          (doct `(("Personal todo" :keys "t"
                   :icon ("checklist" :set "octicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Soon"
                   :type entry
                   :template ("* TODO %?"
                              "%i %a"))
                  ("Personal habit" :keys "h"
                   :icon ("loop" :set "material" :color "blue")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Habits"
                   :type entry
                   :template ("* TODO %?"
                              "SCHEDULED: %^{Times:}t"))
                  (,(format "%s\tInteresting" (all-the-icons-faicon "eye" :face 'all-the-icons-lcyan :v-adjust 0.01))
                   :keys "i"
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Interesting"
                   :type entry
                   :template ("* [ ] %{desc}%? :%{i-type}:"
                              "%i %a")
                   :children ((,(format "%s\tWebpage" (all-the-icons-faicon "globe" :face 'all-the-icons-green :v-adjust 0.01))
                               :keys "w"
                               :desc "%(org-cliplink-capture) "
                               :i-type "read:web"
                               )
                              (,(format "%s\tArticle" (all-the-icons-octicon "file-text" :face 'all-the-icons-yellow :v-adjust 0.01))
                               :keys "a"
                               :desc ""
                               :i-type "read:research"
                               )
                              (,(format "%s\tIdea" (all-the-icons-material "bubble_chart" :face 'all-the-icons-silver :v-adjust 0.01))
                               :keys "i"
                               :desc ""
                               :i-type "idea"
                               )
                              (,(format "%s\tBook" (all-the-icons-faicon "book" :face 'all-the-icons-red :v-adjust 0.01))
                               :keys "b"
                               :desc ""
                               :template ("* [ ] %{desc}%? :%{i-type}:"
                                          "%i")
                               :headline "Books"
                               :i-type "read:book"
                               )
                              (,(format "%s\tTelevision" (all-the-icons-faicon "television" :face 'all-the-icons-orange :v-adjust 0.01))
                               :keys "t"
                               :desc ""
                               :template ("* [ ] %{desc}%? :%{i-type}:"
                                          "%i")
                               :headline "Television"
                               :i-type "watch:tv"
                               )
                              (,(format "%s\tFilm" (all-the-icons-faicon "film" :face 'all-the-icons-purple :v-adjust 0.01))
                               :keys "m"
                               :desc ""
                               :template ("* [ ] %{desc}%? :%{i-type}:"
                                          "%i")
                               :headline "Film"
                               :i-type "watch:film"
                               )))
                  ("Tasks" :keys "k"
                   :icon ("inbox" :set "octicon" :color "yellow")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Tasks"
                   :type entry
                   :template ("* TODO %? %^G%{extra}"
                              "%i %a")
                   :children (("Task" :keys "k"
                               :icon ("inbox" :set "octicon" :color "yellow")
                               :extra "")
                              ("Task with deadline" :keys "d"
                               :icon ("timer" :set "material" :color "orange" :v-adjust -0.1)
                               :extra "\nDEADLINE: %^{Deadline:}t")
                              ("Scheduled task" :keys "s"
                               :icon ("calendar" :set "octicon" :color "orange")
                               :extra "\nSCHEDULED: %^{Start time:}t")))))))

  (set-org-capture-templates)
  (unless (display-graphic-p)
    (add-hook 'server-after-make-frame-hook
              (defun org-capture-reinitialise-hook ()
                (when (display-graphic-p)
                  (set-org-capture-templates)
                  (remove-hook 'server-after-make-frame-hook
                               #'org-capture-reinitialise-hook))))))
#+end_src

#+name: prettify-capture
#+begin_src emacs-lisp :noweb-ref none
(defun org-capture-select-template-prettier (&optional keys)
  "Select a capture template, in a prettier way than default
Lisp programs can force the template by setting KEYS to a string."
  (let ((org-capture-templates
         (or (org-contextualize-keys
              (org-capture-upgrade-templates org-capture-templates)
              org-capture-templates-contexts)
             '(("t" "Task" entry (file+headline "" "Tasks")
                "* TODO %?\n  %u\n  %a")))))
    (if keys
        (or (assoc keys org-capture-templates)
            (error "No capture template referred to by \"%s\" keys" keys))
      (org-mks org-capture-templates
               "Select a capture template\n━━━━━━━━━━━━━━━━━━━━━━━━━"
               "Template key: "
               `(("q" ,(concat (all-the-icons-octicon "stop" :face 'all-the-icons-red :v-adjust 0.01) "\tAbort")))))))
(advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)

(defun org-mks-pretty (table title &optional prompt specials)
  "Select a member of an alist with multiple keys. Prettified.

TABLE is the alist which should contain entries where the car is a string.
There should be two types of entries.

1. prefix descriptions like (\"a\" \"Description\")
   This indicates that `a' is a prefix key for multi-letter selection, and
   that there are entries following with keys like \"ab\", \"ax\"…

2. Select-able members must have more than two elements, with the first
   being the string of keys that lead to selecting it, and the second a
   short description string of the item.

The command will then make a temporary buffer listing all entries
that can be selected with a single key, and all the single key
prefixes.  When you press the key for a single-letter entry, it is selected.
When you press a prefix key, the commands (and maybe further prefixes)
under this key will be shown and offered for selection.

TITLE will be placed over the selection in the temporary buffer,
PROMPT will be used when prompting for a key.  SPECIALS is an
alist with (\"key\" \"description\") entries.  When one of these
is selected, only the bare key is returned."
  (save-window-excursion
    (let ((inhibit-quit t)
          (buffer (org-switch-to-buffer-other-window "*Org Select*"))
          (prompt (or prompt "Select: "))
          case-fold-search
          current)
      (unwind-protect
          (catch 'exit
            (while t
              (setq-local evil-normal-state-cursor (list nil))
              (erase-buffer)
              (insert title "\n\n")
              (let ((des-keys nil)
                    (allowed-keys '("\C-g"))
                    (tab-alternatives '("\s" "\t" "\r"))
                    (cursor-type nil))
                ;; Populate allowed keys and descriptions keys
                ;; available with CURRENT selector.
                (let ((re (format "\\`%s\\(.\\)\\'"
                                  (if current (regexp-quote current) "")))
                      (prefix (if current (concat current " ") "")))
                  (dolist (entry table)
                    (pcase entry
                      ;; Description.
                      (`(,(and key (pred (string-match re))) ,desc)
                       (let ((k (match-string 1 key)))
                         (push k des-keys)
                         ;; Keys ending in tab, space or RET are equivalent.
                         (if (member k tab-alternatives)
                             (push "\t" allowed-keys)
                           (push k allowed-keys))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "›" 'face 'font-lock-comment-face) "  " desc "…" "\n")))
                      ;; Usable entry.
                      (`(,(and key (pred (string-match re))) ,desc . ,_)
                       (let ((k (match-string 1 key)))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")
                         (push k allowed-keys)))
                      (_ nil))))
                ;; Insert special entries, if any.
                (when specials
                  (insert "─────────────────────────\n")
                  (pcase-dolist (`(,key ,description) specials)
                    (insert (format "%s   %s\n" (propertize key 'face '(bold all-the-icons-red)) description))
                    (push key allowed-keys)))
                ;; Display UI and let user select an entry or
                ;; a sub-level prefix.
                (goto-char (point-min))
                (unless (pos-visible-in-window-p (point-max))
                  (org-fit-window-to-buffer))
                (let ((pressed (org--mks-read-key allowed-keys
                                                  prompt
                                                  (not (pos-visible-in-window-p (1- (point-max)))))))
                  (setq current (concat current pressed))
                  (cond
                   ((equal pressed "\C-g") (user-error "Abort"))
                   ;; Selection is a prefix: open a new menu.
                   ((member pressed des-keys))
                   ;; Selection matches an association: return it.
                   ((let ((entry (assoc current table)))
                      (and entry (throw 'exit entry))))
                   ;; Selection matches a special entry: return the
                   ;; selection prefix.
                   ((assoc current specials) (throw 'exit current))
                   (t (error "No entry available")))))))
        (when buffer (kill-buffer buffer))))))
(advice-add 'org-mks :override #'org-mks-pretty)
#+end_src
*** Agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      ;; Don't need to show it in the agenda and the due soon
      org-agenda-skip-deadline-prewarning-if-scheduled t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t
      org-agenda-use-time-grid t
      org-agenda-time-grid '((require-timed remove-match) () " " "----------")
      org-agenda-time-leading-zero t
      org-agenda-start-day "0d"
      ;; don't see scheduled tasks until the scheduled data
      org-agenda-todo-ignore-scheduled 'future
      org-agenda-tags-todo-honor-ignore-options t
      org-agenda-tags-column 100
      org-deadline-warning-days 7
      org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM"
      org-agenda-files '("~/doc/org/todo")
      org-todo-repeat-to-state "LOOP")

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-agenda-scheduled-leaders '("" ""))
                      (org-agenda-deadline-leaders '("D:" "D:" "D:"))
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)
                         (:name "Today's Habits"
                          :date today
                          :scheduled today
                          :category "Habits"
                          :order 2)
                         (:name "Hidden Stuff Not Today"
                          :discard (:anything t))))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-agenda-sorting-strategy '(priority-down timestamp-up))
                       (org-super-agenda-groups
                        '((:discard (:tag ("read" "watch" "listen" "think")))
                          (:discard (:date today)) ;; covered above.
                          (:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "University"
                           :tag "uni"
                           :order 10)
                          (:name "Emacs"
                           :tag "emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "proj"
                           :order 14)
                          (:name "Holding"
                           :todo "HOLD"
                           :order 20)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("trivial" "unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("habit")))))))))
        ("i" "Interesting"
         ((alltodo "" ((org-agenda-sorting-strategy '(priority-down timestamp-up))
                       (org-super-agenda-groups
                        '((:discard (:not (:tag ("read" "watch" "listen" "think"))))
                          (:name "Webpages"
                           :and (:tag ("read") :tag ("web"))
                           :order 1)
                          (:name "Info/Ideas"
                           :and (:tag ("read") :tag ("info"))
                           :tag "think"
                           :order 2)
                          (:name "Papers"
                           :and (:tag ("read") :tag ("research"))
                           :order 10)
                          (:name "Films"
                           :and (:tag ("watch") :tag ("film"))
                           :order 3)
                          (:name "Shows"
                           :and (:tag ("watch") :tag ("tv"))
                           :order 4)
                          (:name "Books"
                           :and (:tag ("read") :tag ("book"))
                           :order 5)
                          (:name "Audio"
                           :tag ("listen")
                           :order 6)))))))))
#+end_src

*** Roam
#+begin_src emacs-lisp
(setq org-roam-directory "~/doc/notes/"
      org-roam-db-location (concat org-roam-directory ".org-roam.db"))
#+end_src
Dendroam, because I like some hierarchy.
#+begin_src emacs-lisp
(use-package! dendroam
  :after org-roam
  :config
  (setq org-roam-node-display-template
        (format "${hierarchy:30} ${title:*} %s"
                (propertize "${doom-tags:10}" 'face 'org-tag)))

  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${hierarchy-title}\n")
           :immediate-finish t
           :unnarrowed t)))

  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "journal.daily.%<%Y.%m.%d>.org"
                              "#+title: %<%Y-%m-%d>\n"))))

  ;; we have to add this to work around org roam changing things - see https://github.com/vicrdguez/dendroam/issues/18
  (setq org-roam-slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                                   768 ; U+0300 COMBINING GRAVE ACCENT
                                   769 ; U+0301 COMBINING ACUTE ACCENT
                                   770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                                   771 ; U+0303 COMBINING TILDE
                                   772 ; U+0304 COMBINING MACRON
                                   774 ; U+0306 COMBINING BREVE
                                   775 ; U+0307 COMBINING DOT ABOVE
                                   776 ; U+0308 COMBINING DIAERESIS
                                   777 ; U+0309 COMBINING HOOK ABOVE
                                   778 ; U+030A COMBINING RING ABOVE
                                   780 ; U+030C COMBINING CARON
                                   795 ; U+031B COMBINING HORN
                                   803 ; U+0323 COMBINING DOT BELOW
                                   804 ; U+0324 COMBINING DIAERESIS BELOW
                                   805 ; U+0325 COMBINING RING BELOW
                                   807 ; U+0327 COMBINING CEDILLA
                                   813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                                   814 ; U+032E COMBINING BREVE BELOW
                                   816 ; U+0330 COMBINING TILDE BELOW
                                   817 ; U+0331 COMBINING MACRON BELOW
                                   )))
#+end_src
